基本数据类型
byte：1个字节，8位，默认值0
short：2个字节，16位，默认值0
int：4个字节，32位，默认值0
long：8个字节，64位，默认值0
float：4个字节，32位，默认值0.0f
double：8个字节，64位，默认值0.0d
boolean：官方文档未明确定义，依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1位，但是实际中会考虑计算机高效存储因素，默认值falese
char：2个字节，16位，默认值‘\U0000’
int是基本数据类型，integer是包装类
自动转换：运算过程中，低级可以自动向高级转换
强制转换：高级需要强制转换为低级，可能会丢失精度

基本类型和包装类的区别？
包装类型可以为 null，而基本类型不可以
包装类型可用于泛型，而基本类型不可以
基本类型比包装类型更高效
两个包装类型的值可以相同，但却不相等

装箱是通过调用包装器类的 valueOf 方法实现的
拆箱是通过调用包装器类的 xxxValue 方法实现的

什么是泛型
就是将原来具体的类型参数化

为什么要用泛型？
使用泛型编写代码，要比使用 Object 变量进行强制类型转换的代码，具有更好的安全性和可读性。
多种数据类型执行相同的代码时，使用泛型可以复用代码。

十进制数在内存中是以补码的形式进行存储的

^：异或，两个操作数有一个1，结果为1

&：表示按位与、逻辑与
&&：表示短路与运算，如果左边为f，右边会被短路掉

java中的 << >> >>> 是什么？
<< 表示左移，不分正负数，低位补0
>>  表示右移，如果该数为正，则高位补0，若为负数，则高位补1
>>> 表示无符号右移，也叫逻辑右移，即高位补0

如何让计算机最高效的算出2乘以8？
2 <<3
位运算符 <<，是将一个数左移 n 位，相当于乘以了 2 的 n 次方
一个数乘以 8 只要将其左移 3 位即可
CPU 直接支持位运算，且效率最高

E： 2E5 = 32

为什么会出现4.0-3.6=0.40000001？
原因简单来说是这样：2进制的小数无法精确的表达10进制小数，计算机在计算10进制小数的过程中要先转换为2进制进行计算，这个过程中出现了误差
